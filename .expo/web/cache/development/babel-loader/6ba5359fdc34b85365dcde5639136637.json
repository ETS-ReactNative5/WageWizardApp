{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Tracking;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Map = _interopRequireDefault(require(\"./Map\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _colors = _interopRequireDefault(require(\"../styles/colors.js\"));\n\nvar _jsxFileName = \"/Users/jackdavey/SeniorDesign/WageWizardApp/src/components/Track.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction Tracking() {\n  var testNumber = 7190;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(true),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      isPaused = _useState4[0],\n      setIsPaused = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(0),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      time = _useState6[0],\n      setTime = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(false),\n      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n      isPressed = _useState8[0],\n      setPressed = _useState8[1];\n\n  var _useState9 = (0, _react.useState)('Start'),\n      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),\n      buttonText = _useState10[0],\n      setButtonText = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(_colors.default.trackTimerStart),\n      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),\n      buttonColor = _useState12[0],\n      setButtonColor = _useState12[1];\n\n  var seconds = (\"0\" + time / 1 % 60).slice(-2);\n  var minutes = (\"0\" + Math.floor(time / 60) % 60).slice(-2);\n  var hours = (\"0\" + Math.floor(time / 3600) % 24).slice(-2);\n  (0, _react.useEffect)(function () {\n    var interval = setInterval(function () {}, 0);\n\n    if (isActive && isPaused === false) {\n      interval = setInterval(function () {\n        setTime(function (prevTime) {\n          return prevTime + 1;\n        });\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n\n    return function () {\n      clearInterval(interval);\n    };\n  }, [isActive, isPaused]);\n\n  var handleStart = function handleStart() {\n    setIsActive(true);\n    setIsPaused(false);\n  };\n\n  var handleReset = function handleReset() {\n    setIsActive(false);\n    setTime(0);\n  };\n\n  var handlePress = function handlePress() {\n    if (!isPressed) {\n      setPressed(true);\n      setButtonText('Stop');\n      setButtonColor(_colors.default.trackTimerStop);\n      handleStart();\n    } else {\n      setPressed(false);\n      setButtonText('Start');\n      setButtonColor(_colors.default.trackTimerStart);\n      handleReset();\n    }\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: [styles.elements, global.globalCustomFontUse ? {\n      fontFamily: 'SFPro-Regular'\n    } : {}],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Timer: \", hours, \": \", minutes, \": \", seconds), _react.default.createElement(_Map.default, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: [styles.elements, global.globalCustomFontUse ? {\n      fontFamily: 'SFPro-Regular'\n    } : {}],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, \"Job: Default Job\"), _react.default.createElement(_reactNative.TouchableOpacity, {\n    onPress: function onPress() {\n      handlePress();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: [styles.start, {\n      backgroundColor: buttonColor\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: [styles.elements, global.globalCustomFontUse ? {\n      fontFamily: 'SFPro-Regular'\n    } : {}],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, buttonText))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: _reactNative.Dimensions.get('window').width,\n    height: _reactNative.Dimensions.get('window').height\n  },\n  elements: {\n    paddingBottom: _reactNative.Dimensions.get('window').height * 0.02,\n    paddingTop: _reactNative.Dimensions.get('window').height * 0.02,\n    fontSize: 40\n  },\n  map: {\n    width: _reactNative.Dimensions.get('window').width * 0.9,\n    height: _reactNative.Dimensions.get('window').height * 0.35\n  },\n  start: {\n    width: _reactNative.Dimensions.get('window').height * 0.2,\n    height: _reactNative.Dimensions.get('window').height * 0.2,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: _reactNative.Dimensions.get('window').height * 0.2 / 2,\n    borderColor: _colors.default.dark,\n    borderWidth: 2,\n    backgroundColor: \"green\"\n  }\n});","map":{"version":3,"sources":["/Users/jackdavey/SeniorDesign/WageWizardApp/src/components/Track.tsx"],"names":["Tracking","testNumber","isActive","setIsActive","isPaused","setIsPaused","time","setTime","isPressed","setPressed","buttonText","setButtonText","COLORS","trackTimerStart","buttonColor","setButtonColor","seconds","slice","minutes","Math","floor","hours","interval","setInterval","prevTime","clearInterval","handleStart","handleReset","handlePress","trackTimerStop","styles","container","elements","global","globalCustomFontUse","fontFamily","start","backgroundColor","StyleSheet","create","flex","alignItems","justifyContent","width","Dimensions","get","height","paddingBottom","paddingTop","fontSize","map","borderRadius","borderColor","dark","borderWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react';\nimport Map from './Map';\n\nimport {\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  Dimensions,\n  StyleSheet,\n  Text,\n  useColorScheme,\n  View,\n  TouchableOpacity,\n  Alert,\n} from 'react-native';\n\n\nimport COLORS from '../styles/colors.js';\n\nexport default function Tracking() {\n  let testNumber = 7190;\n\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(true);\n  // set to to test number to get to 1:59:50 starting time\n  const [time, setTime] = useState(0);\n  const [isPressed, setPressed] = useState(false);\n  const [buttonText, setButtonText] = useState('Start');\n  const [buttonColor, setButtonColor] = useState(COLORS.trackTimerStart);\n\n  let seconds = (\"0\" + ((time / 1) % 60)).slice(-2)\n  let minutes = (\"0\" + (Math.floor((time / 60)) % 60)).slice(-2)\n  let hours = (\"0\" + (Math.floor((time / 3600)) % 24)).slice(-2)\n\n  useEffect(()=>{\n    let interval = setInterval(()=>{},0);\n    if (isActive && isPaused === false) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n\n  },[isActive,isPaused]); \n\n  const handleStart = ()=>{\n    setIsActive(true);\n    setIsPaused(false);\n  }\n  const handleReset = () => {\n    setIsActive(false);\n    setTime(0);\n  };\n\n  const handlePress  = ()=>{\n    if (!isPressed){\n      setPressed(true);\n      setButtonText('Stop');\n      setButtonColor(COLORS.trackTimerStop);\n      handleStart();\n    }else{\n      setPressed(false);\n      setButtonText('Start');\n      setButtonColor(COLORS.trackTimerStart);\n      handleReset();\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={[styles.elements, global.globalCustomFontUse ? {fontFamily: 'SFPro-Regular'} : {}]}>Timer: {hours}: {minutes}: {seconds}</Text>\n      <Map />\n      <Text style={[styles.elements, global.globalCustomFontUse ? {fontFamily: 'SFPro-Regular'} : {}]}>Job: Default Job</Text>\n      <TouchableOpacity onPress = {()=>{handlePress()}}>\n        <View style={[styles.start,{backgroundColor: buttonColor}]} >\n          <Text \n            style={[styles.elements, global.globalCustomFontUse ? {fontFamily: 'SFPro-Regular'} : {}]}\n          >\n            {buttonText}</Text>\n        </View>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n  },\n  elements: {\n    paddingBottom: Dimensions.get('window').height * 0.02,\n    paddingTop: Dimensions.get('window').height * 0.02,\n    fontSize: 40,\n  },\n  map: {\n    width: Dimensions.get('window').width * 0.9,\n    height: Dimensions.get('window').height * 0.35,\n  },\n  start: {\n    width: Dimensions.get('window').height * 0.2,\n    height: Dimensions.get('window').height * 0.2,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: Dimensions.get('window').height * 0.2 / 2,\n    borderColor: COLORS.dark,\n    borderWidth: 2,\n    backgroundColor: \"green\",\n  },\n});\n\n\n\n"]},"metadata":{},"sourceType":"script"}